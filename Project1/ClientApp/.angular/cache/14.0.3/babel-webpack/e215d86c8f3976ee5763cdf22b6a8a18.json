{"ast":null,"code":"/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n  if (!/^data:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  } // strip newlines\n\n\n  uri = uri.replace(/\\r?\\n/g, ''); // split the URI up into the \"metadata\" and the \"data\" portions\n\n  const firstComma = uri.indexOf(',');\n\n  if (firstComma === -1 || firstComma <= 4) {\n    throw new TypeError('malformed data: URI');\n  } // remove the \"data:\" scheme and parse the metadata\n\n\n  const meta = uri.substring(5, firstComma).split(';');\n  let charset = '';\n  let base64 = false;\n  const type = meta[0] || 'text/plain';\n  let typeFull = type;\n\n  for (let i = 1; i < meta.length; i++) {\n    if (meta[i] === 'base64') {\n      base64 = true;\n    } else if (meta[i]) {\n      typeFull += `;${meta[i]}`;\n\n      if (meta[i].indexOf('charset=') === 0) {\n        charset = meta[i].substring(8);\n      }\n    }\n  } // defaults to US-ASCII only if type is not provided\n\n\n  if (!meta[0] && !charset.length) {\n    typeFull += ';charset=US-ASCII';\n    charset = 'US-ASCII';\n  } // get the encoded data portion and decode URI-encoded chars\n\n\n  const encoding = base64 ? 'base64' : 'ascii';\n  const data = unescape(uri.substring(firstComma + 1));\n  const buffer = Buffer.from(data, encoding); // set `.type` and `.typeFull` properties to MIME type\n\n  buffer.type = type;\n  buffer.typeFull = typeFull; // set the `.charset` property\n\n  buffer.charset = charset;\n  return buffer;\n}\nexport default dataUriToBuffer;","map":{"version":3,"names":["dataUriToBuffer","uri","test","TypeError","replace","firstComma","indexOf","meta","substring","split","charset","base64","type","typeFull","i","length","encoding","data","unescape","buffer","Buffer","from"],"sources":["C:/Users/lbsousa/Angular/Project1/node_modules/data-uri-to-buffer/dist/index.js"],"sourcesContent":["/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, '');\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(',');\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError('malformed data: URI');\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(';');\n    let charset = '';\n    let base64 = false;\n    const type = meta[0] || 'text/plain';\n    let typeFull = type;\n    for (let i = 1; i < meta.length; i++) {\n        if (meta[i] === 'base64') {\n            base64 = true;\n        }\n        else if (meta[i]) {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf('charset=') === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += ';charset=US-ASCII';\n        charset = 'US-ASCII';\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? 'base64' : 'ascii';\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nexport default dataUriToBuffer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAT,CAAyBC,GAAzB,EAA8B;EACjC,IAAI,CAAC,UAAUC,IAAV,CAAeD,GAAf,CAAL,EAA0B;IACtB,MAAM,IAAIE,SAAJ,CAAc,kEAAd,CAAN;EACH,CAHgC,CAIjC;;;EACAF,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAN,CALiC,CAMjC;;EACA,MAAMC,UAAU,GAAGJ,GAAG,CAACK,OAAJ,CAAY,GAAZ,CAAnB;;EACA,IAAID,UAAU,KAAK,CAAC,CAAhB,IAAqBA,UAAU,IAAI,CAAvC,EAA0C;IACtC,MAAM,IAAIF,SAAJ,CAAc,qBAAd,CAAN;EACH,CAVgC,CAWjC;;;EACA,MAAMI,IAAI,GAAGN,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAiBH,UAAjB,EAA6BI,KAA7B,CAAmC,GAAnC,CAAb;EACA,IAAIC,OAAO,GAAG,EAAd;EACA,IAAIC,MAAM,GAAG,KAAb;EACA,MAAMC,IAAI,GAAGL,IAAI,CAAC,CAAD,CAAJ,IAAW,YAAxB;EACA,IAAIM,QAAQ,GAAGD,IAAf;;EACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;IAClC,IAAIP,IAAI,CAACO,CAAD,CAAJ,KAAY,QAAhB,EAA0B;MACtBH,MAAM,GAAG,IAAT;IACH,CAFD,MAGK,IAAIJ,IAAI,CAACO,CAAD,CAAR,EAAa;MACdD,QAAQ,IAAK,IAAGN,IAAI,CAACO,CAAD,CAAI,EAAxB;;MACA,IAAIP,IAAI,CAACO,CAAD,CAAJ,CAAQR,OAAR,CAAgB,UAAhB,MAAgC,CAApC,EAAuC;QACnCI,OAAO,GAAGH,IAAI,CAACO,CAAD,CAAJ,CAAQN,SAAR,CAAkB,CAAlB,CAAV;MACH;IACJ;EACJ,CA3BgC,CA4BjC;;;EACA,IAAI,CAACD,IAAI,CAAC,CAAD,CAAL,IAAY,CAACG,OAAO,CAACK,MAAzB,EAAiC;IAC7BF,QAAQ,IAAI,mBAAZ;IACAH,OAAO,GAAG,UAAV;EACH,CAhCgC,CAiCjC;;;EACA,MAAMM,QAAQ,GAAGL,MAAM,GAAG,QAAH,GAAc,OAArC;EACA,MAAMM,IAAI,GAAGC,QAAQ,CAACjB,GAAG,CAACO,SAAJ,CAAcH,UAAU,GAAG,CAA3B,CAAD,CAArB;EACA,MAAMc,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBD,QAAlB,CAAf,CApCiC,CAqCjC;;EACAG,MAAM,CAACP,IAAP,GAAcA,IAAd;EACAO,MAAM,CAACN,QAAP,GAAkBA,QAAlB,CAvCiC,CAwCjC;;EACAM,MAAM,CAACT,OAAP,GAAiBA,OAAjB;EACA,OAAOS,MAAP;AACH;AACD,eAAenB,eAAf"},"metadata":{},"sourceType":"module"}